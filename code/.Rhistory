filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max=mean(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
class(y)
y
summarise(y, max(value))
?group_by
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
tail(y)
head(y)
y
summarise(y, h=mean(value))
planes <- group_by(hflights_df, TailNum)
library(hflights)
planes <- group_by(hflights_df, TailNum)
install.packages('dplyr')
install.packages("dplyr")
library('dplyr')
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
library('reshape2')
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
?summarise
y
num.tries=25
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/header.R')
varSave<-'../variables/'
ex.mods<-'modules/'
library('plyr')
library('reshape2')
library('dplyr')
my.vars<-load.variables()
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
library('Matrix')
Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()
X=rbind(X, -diag(ncol(X)))
Y=c(Y, rep(0, ncol(X)))
#define function in line (10) of Holmes (2011)
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
#Try at several starting values
num.tries=25
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
?summarise
varSave<-'../variables/'
ex.mods<-'modules/'
library('dplyr')
library('plyr')
library('reshape2')
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
varSave<-'../variables/'
ex.mods<-'modules/'
library('dplyr')
library('plyr')
library('reshape2')
.paths()
.path()
my.vars<-load.variables()
source('header.R')
my.vars<-load.variables()
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/modules/loadVars.R')
my.vars<-load.variables()
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
library('Matrix')
Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()
X=rbind(X, -diag(ncol(X)))
Y=c(Y, rep(0, ncol(X)))
#define function in line (10) of Holmes (2011)
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
#Try at several starting values
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
dplyr::summarise(maxVal=max(value))
.libPaths
.libPaths()
library('dplyr')
detach('plyr')
source('header.R')
expand.grid(bucket=1:3, choices=c('a', 'b', 'c'))
expand.grid(bucket=1:3, choices=c('a', 'b', 'c')) %>%
mutate(means=rnorm)
expand.grid(bucket=1:3, choices=c('a', 'b', 'c')) %>%
mutate(means=rnorm())
expand.grid(bucket=1:3, choices=c('a', 'b', 'c')) %>%
mutate(means=rnorm(n()))
expand.grid(bucket=1:3, choices=c('a', 'b', 'c')) %>%
mutate(val=rnorm(n()))
vals<-expand.grid(bucket=1:3, choices=c('a', 'b', 'c')) %>%
mutate(val=rnorm(n()))
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
vals
lambda<-select(vals, bucket) %>%
unique()
lambda
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
lambda
inclusive.value<-left_join(vals, lambda)
inclusive.value
inclusive.value<-left_join(vals, lambda) %>%
group_by(bucket) %>%
summarise(inclusive.val=log(sum(exp(val/lambda))))
inclusive.value
inclusive.value<-left_join(vals, lambda) %>%
group_by(bucket) %>%
summarise(inclusive.val=lambda*log(sum(exp(val/lambda))))
inclusive.value<-left_join(vals, lambda) %>%
group_by(bucket) %>%
summarise(lambda=lambda, inclusive.val=log(sum(exp(val/lambda))))
inclusive.value<-left_join(vals, lambda) %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda))))
inclusive.value
inclusive.value<-left_join(vals, lambda) %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
inclusive.value
first.choice<-rgev(S, xi = 0, mu = 0, beta = 1) %>%
matrix(nrow=nrow(inclusive.value), ncol=S)
library('fExtremes')
first.choice<-rgev(S, xi = 0, mu = 0, beta = 1) %>%
matrix(nrow=nrow(inclusive.value), ncol=S)
S<=10^5
first.choice<-rgev(S, xi = 0, mu = 0, beta = 1) %>%
matrix(nrow=nrow(inclusive.value), ncol=S)
S<-10^5
first.choice<-rgev(S, xi = 0, mu = 0, beta = 1) %>%
matrix(nrow=nrow(inclusive.value), ncol=S)
class(first.choice)
dim(first.choice)
matrix(inclusive.value, nrow=nrow(inclusive.value), ncol=S)
matrix(inclusive.value, ncol=nrow(inclusive.value), nrow=S)
inclusive.value
matrix(inclusive.value$inclusive.val, ncol=nrow(inclusive.value), nrow=S) %>% head()
matrix(inclusive.value$inclusive.val, nrow=nrow(inclusive.value), ncol=S) %>% head()
matrix(inclusive.value$inclusive.val, nrow=nrow(inclusive.value), ncol=10)
matrix(inclusive.value$inclusive.val, nrow=nrow(inclusive.value), ncol=100)
?sum
first.choice<-sum(
matrix(inclusive.value$inclusive.val, nrow=nrow(inclusive.value), ncol=S),
matrix(rgev(S, xi = 0, mu = 0, beta = 1), nrow=nrow(inclusive.value), ncol=S)
)
dim(first.choice)
class(first.choice)
first.choice<-
matrix(inclusive.value$inclusive.val, nrow=nrow(inclusive.value), ncol=S) +
matrix(rgev(S, xi = 0, mu = 0, beta = 1), nrow=nrow(inclusive.value), ncol=S)
class(first.choice)
dim(first.choice)
inclusive.value
first.choice<-ldply(seq(S), function() inclusive.value$inclusive.val+rgev(length(inclusive.val), xi = 0, mu = 0, beta = 1))
first.choice<-ldply(seq(S), function(l) inclusive.value$inclusive.val+rgev(length(inclusive.val), xi = 0, mu = 0, beta = 1))
inclusive.value$inclusive.val
S<-10^2
first.choice<-ldply(seq(S), function(l) inclusive.value$inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1))
first.choice
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
vals
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
S<-10^2
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
vals
lambda<-select(vals, bucket) %>%
unique()
lambda<-dplyr:select(vals, bucket) %>%
unique()
source('~/Dropbox/teaching/OPNS910/assignments/OPNS910_Hendel2006/solution/code/header.R')
S<-10^2
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr:select(vals, bucket)
library('dplyr')
lambda<-select(vals, bucket)
?select
?dplyr::select
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr::select(vals, bucket)
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-select(vals, bucket)
?select
source('header.R')
library('fExtremes')
S<-10^2
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr::select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
inclusive.value
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr::select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
inclusive.value$inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)
y=inclusive.value$inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)
y
class(y)
filter(y, rank(val, ties.method="first")==1)
rank(y)
?rank
which(y, y=max(y))
which(y, y==max(y))
which(y==max(y))
vals=inclusive.value$inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)
which(vals==max(vals))[1]
vals
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr::select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
first.choice<-ldply(seq(S), function(l){
vals=inclusive.value$inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)
which(vals==max(vals))[1]
})
first.choice
inclusive.value
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
filter(rank(val, ties.method="first")==1)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1))
y=mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1))
filter(y, rank(val, ties.method="first")==1)
y
class(y)
mutate(y, rank=rank(val))
filter(y, rank('val', ties.method="first")==1)
y
filter(y, rank(val, ties.method="first")==1)
filter(y, rank(y$val, ties.method="first")==1)
filter(y, rank(y$val)==1)
filter(y, rank(val)==1)
y
y$r=y$val
filter(y, rank(r)==1)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
select(bucket, val)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1))
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr:select(bucket, val)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, val)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, val) %>%
filter(rank(val, ties.method="first")==1)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, val) %>%
filter(rank(val)==1)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, val) %>%
filter(abs(val)>1)
mutate(inclusive.value, val=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, val)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value) %>%
filter(abs(value)>1)
source('header.R')
library('fExtremes')
S<-10^2
vals<-expand.grid(bucket=1:10, choices=c('a', 'b', 'c', 'd', 'e')) %>%
mutate(val=rnorm(n()))
lambda<-dplyr::select(vals, bucket) %>%
unique() %>%
mutate(lambda=runif(n()))
inclusive.value<-left_join(vals, lambda, by='bucket') %>%
group_by(bucket) %>%
summarise(lambda=unique(lambda), inclusive.val=log(sum(exp(val/lambda)))) %>%
mutate(inclusive.val=lambda*inclusive.val)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value) %>%
filter(abs(value)>1)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value) %>%
filter(value>1)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value) %>%
filter(bucket>1)
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value)
y=mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value)
y
class(y)
filter(y, bucket=3)
filter(y, bucket==3)
?filter
mutate(inclusive.value, value=inclusive.val+rgev(nrow(inclusive.value), xi = 0, mu = 0, beta = 1)) %>%
dplyr::select(bucket, value) %>%
dplyr::filter(bucket>1)
library('dplyr')
search()
library('dplyr', pos=1)
search()
?library
?search
detach('fExtremes')
source('header.R')
library('fExtremes', pos=20)
search()
source('header.R')
makeData()
source('~/Dropbox/teaching/OPNS523/labs/OPNS_NestedLogit_lab/github/code/modules/makeData.R')
makeData()
varSave
source('~/Dropbox/teaching/OPNS523/labs/OPNS_NestedLogit_lab/github/code/modules/makeData.R')
makeData()
val=read.rds('choice_values.rds')
source('header.R')
makeData()
val=readRDS('choice_values.rds')
val=readRDS(paste0(varSave, 'choice_values.rds'))
lambda=readRDS(paste0(varSave, 'lambda_values.rds'))
val
lambda
#Nested logit coding assignment
source('header.R')
#Load data
val<-readRDS(paste0(varSave, 'choice_values.rds'))
lambda<-readRDS(paste0(varSave, 'lambda_values.rds'))
#Nested logit coding assignment
source('header.R')
#Load data
val<-readRDS(paste0(varSave, 'choice_values.rds'))
lambda<-readRDS(paste0(varSave, 'lambda_values.rds'))
help(rgev)
size = 10000
eps<- rgev(size, xi = 0, mu = 0, beta = 1)
eta<- rgev(size, xi = 0, mu = 0, beta = 1)
View(lambda)
View(val)
library('plyr')
eps<- raply(3,rgev(size, xi = 0, mu = 0, beta = 1))
eta<- raply(3,rgev(size, xi = 0, mu = 0, beta = 1))
eps<- rdply(3,rgev(size, xi = 0, mu = 0, beta = 1))
eta<- rdply(3,rgev(size, xi = 0, mu = 0, beta = 1))
View(eta)
View(eps)
help(rdply)
library('dplyr')
